<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>{{ title | safe }}</title>
        <link href="/css/prism.css" rel="stylesheet">
        <link href="/css/global.css" rel="stylesheet">
    </head>
    <body>
        {% set navPages = collections.all | eleventyNavigationBreadcrumb(eleventyNavigation.key) %}
        {% set children = collections.all | eleventyNavigation(eleventyNavigation.key) %}

        <nav>
            {%- for page in navPages %}
                {% if navPages.indexOf(page) > 0 %}|{% endif %}
                <a href="{{ page.url }}">{{ page.title }}</a>
            {%- endfor %}
        </nav>
        <article>
            <h1>{{ title | safe }}</h1>
            {{ content | safe }}
            {{ children | eleventyNavigationToHtml | safe }}
        </article>
    </body>
    <script>
        function isOriginSameAsLocation(url) {
            var pageLocation = window.location;
            var URL_HOST_PATTERN = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/;
            var urlMatch = URL_HOST_PATTERN.exec(url) || [];
            var urlparts = {
                protocol: urlMatch[1] || '',
                host: urlMatch[2] || '',
                port: urlMatch[3] || ''
            };

            function defaultPort(protocol) {
                return {'http:': 80, 'https:': 443}[protocol];
            }

            function portOf(location) {
                return location.port || defaultPort(location.protocol || pageLocation.protocol);
            }

            return !!((urlparts.protocol && (urlparts.protocol == pageLocation.protocol)) && (urlparts.host && (urlparts.host == pageLocation.host)) && (urlparts.host && (portOf(urlparts) == portOf(pageLocation))));
        }

        const preloaded = [];

        const preload = async () => {
            await document
                .querySelectorAll("a")
                .forEach(async (element, i) => {
                    const href = element.href
                    if (isOriginSameAsLocation(href) || href.includes("://localhost:")) {
                        element.addEventListener("mouseover", async () => {
                            if(!preloaded.includes(i)) {
                                preloaded.push(i);
                                const html = await(await fetch(href)).text()
                                element.addEventListener("click", (e) => {
                                    e.preventDefault();
                                    document.documentElement.innerHTML = html;
                                    preload();
                                    window.location.href = href;
                                });
                                console.log("Preloading!")
                            }
                        })
                    }
                })
            return true
        }
        </script>
    <script defer>
        preload();
    </script>
</html>